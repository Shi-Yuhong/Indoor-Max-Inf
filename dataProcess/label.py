import cv2 as cv
import pyautogui
# points =[]
points =[(101, 112), (99, 222), (98, 292), (95, 370), (94, 433), (93, 502), (97, 570), (96, 638), (96, 698), (98, 771), (93, 831), (95, 902), (101, 992), (256, 993), (336, 993), (418, 994), (492, 992), (576, 993), (664, 992), (814, 987), (900, 990), (986, 990), (1063, 986), (1145, 987), (1227, 984), (1302, 984), (1440, 981), (1437, 853), (1443, 674), (1459, 568), (1474, 534), (1466, 467), (1478, 401), (1481, 331), (1487, 258), (1399, 110), (1138, 96), (1061, 100), (979, 99), (900, 101), (816, 104), (742, 99), (662, 101), (562, 102), (255, 101), (327, 103), (264, 348), (330, 348), (259, 457), (329, 430), (271, 530), (334, 528), (264, 567), (333, 562), (272, 658), (334, 653), (271, 703), (334, 702), (614, 227), (742, 223), (859, 227), (980, 225), (1099, 230), (1224, 229), (1285, 366), (1287, 437), (1289, 511), (1290, 568), (1286, 637), (1284, 713), (243, 829), (313, 828), (380, 827), (454, 829), (526, 825), (597, 825), (667, 823), (847, 821), (1006, 823), (1079, 823), (1151, 824), (1226, 825), (1300, 827), (1104, 376), (1088, 578), (1084, 661), (906, 409), (919, 524), (753, 541), (685, 461), (582, 415), (578, 558), (628, 719), (478, 496), (473, 568), (467, 728), (487, 209), (413, 92), (307, 234), (209, 400), (183, 750), (419, 781), (390, 916), (596, 912), (473, 382), (497, 292), (1226, 178), (933, 339), (1025, 781), (937, 898), (1221, 913), (1385, 788), (1397, 550), (1385, 281), (1241, 490)]
# 保存点击位置的列表
# points = [(278, 160), (358, 162), (240, 189), (167, 240), (167, 308), (212, 346), (278, 307), (353, 307), (402, 250), (445, 116), (472, 143), (521, 145), (540, 231), (591, 158), (674, 157), (756, 158), (837, 156), (919, 157), (998, 157), (1079, 156), (1159, 156), (1386, 205), (1218, 303), (1097, 303), (1066, 303), (856, 303), (826, 303), (614, 303), (170, 376), (168, 442), (169, 512), (168, 580), (169, 645), (168, 713), (168, 782), (167, 846), (166, 912), (226, 926), (266, 894), (337, 894), (415, 892), (478, 895), (533, 895), (613, 895), (682, 893), (279, 937), (360, 937), (439, 936), (521, 937), (600, 937), (684, 936), (223, 445), (224, 513), (225, 580), (224, 649), (223, 714), (407, 715), (406, 646), (406, 580), (406, 510), (406, 446), (458, 457), (458, 602), (458, 631), (595, 388), (699, 390), (786, 390), (819, 428), (590, 696), (641, 755), (713, 579), (815, 580), (717, 648), (720, 715), (814, 714), (812, 650), (766, 741), (900, 753), (953, 485), (957, 387), (1049, 373), (1192, 364), (1212, 573), (1211, 730), (756, 891), (720, 906), (850, 891), (1303, 892), (844, 922), (925, 923), (1007, 922), (1085, 922), (1166, 924), (1247, 923), (1352, 923), (1414, 893), (1240, 893), (1167, 893), (1097, 894), (1023, 895), (1314, 771), (1412, 808), (1412, 713), (1375, 714), (1375, 649), (1435, 607), (1376, 577), (1375, 517), (1435, 514), (1436, 443), (1436, 380), (1436, 313), (1435, 243), (1375, 397), (1377, 440), (1391, 481), (1191, 543), (869, 578), (428, 344), (403, 395), (194, 615), (228, 784), (235, 911), (497, 916), (430, 614), (719, 780), (1236, 752), (1062, 907), (1366, 906), (1402, 614), (1342, 203), (1324, 320), (1204, 321), (718, 319), (720, 368), (719, 178)]
# 读取图像
img_path = 'img/origin.jpg'  # 替换为您的图片路径
img = cv.imread(img_path)

if img is None:
    print('Failed to read image.')
    exit()

# 获取屏幕尺寸
screen_width, screen_height = pyautogui.size()
# 计算缩放比例
scale_factor = min(screen_width / img.shape[1], screen_height / img.shape[0])
# 缩放图片
img = cv.resize(img, None, fx=scale_factor, fy=scale_factor)

# 定义鼠标事件回调函数
def draw_circle(event, x, y, flags, param):

    global points
    if event == cv.EVENT_LBUTTONDOWN:
        # 检查点击位置是否在某个已绘制的原点附近
        for point in points:
            dist = cv.norm((x, y), point)
            if dist <= 5:
                # 删除该位置的原点并从points中移除记录
                points.remove(point)
                cv.circle(img, (x, y), 5, (255, 0 , 0), -1)
                return

        cv.circle(img, (x, y), 5, (0, 255, 0), -1)  # 在点击位置绘制圆形标记
        points.append((x, y))  # 将点击位置保存到points列表中

def draw_final(points):

    # 创建窗口并设置鼠标事件回调函数
    cv.namedWindow('image', cv.WINDOW_NORMAL)
    count = 1
    # 设置字体样式和大小
    font = cv.FONT_HERSHEY_SIMPLEX
    font_scale = 0.6

    # 在原图上绘制所有点击位置的圆点标记
    # 在每个坐标点附近标上字符'd'
    for point in points:
        x, y = point
        # cv.circle(img, (x, y), 5, (0, 0, 255), -1)

        label = str(count)
        cv.putText(img, label, (x+5, y+8), font, font_scale, (255, 140 , 0), 2, cv.LINE_AA)
        count = count+1

    # 显示最终的图片
    cv.imshow('image', img)
    cv.waitKey(0)

    # 保存最终的图片到本地
    output_path = 'img/partition.jpg'  # 替换为您保存的路径
    cv.imwrite(output_path, img)

def doorLabel(img):

    # 创建窗口并设置鼠标事件回调函数
    cv.namedWindow('image',cv.WINDOW_NORMAL)
    # 设置窗口属性
    cv.setWindowProperty('image', cv.WND_PROP_FULLSCREEN, cv.WINDOW_FULLSCREEN)
    cv.setWindowProperty('image', cv.WND_PROP_ASPECT_RATIO, cv.WINDOW_FREERATIO)

    cv.setMouseCallback('image', draw_circle)

    while True:
        cv.imshow('image', img)
        k = cv.waitKey(1)

        # 按下键盘上的ESC键退出循环
        if k == 27:
            break

    # 主循环退出后，调用draw_final函数保存最终的图像
    draw_final(points)

    cv.destroyAllWindows()
    print('Final image saved successfully.')
    print(len(points))
    print(points)

doorLabel(img)
# list = [(278, 160), (358, 162), (240, 189), (167, 240), (167, 308), (212, 346), (278, 307), (353, 307), (402, 250), (445, 116), (472, 143), (521, 145), (540, 231), (591, 158), (674, 157), (756, 158), (837, 156), (919, 157), (998, 157), (1079, 156), (1159, 156), (1386, 205), (1218, 303), (1097, 303), (1066, 303), (856, 303), (826, 303), (614, 303), (170, 376), (168, 442), (169, 512), (168, 580), (169, 645), (168, 713), (168, 782), (167, 846), (166, 912), (226, 926), (266, 894), (337, 894), (415, 892), (478, 895), (533, 895), (613, 895), (682, 893), (279, 937), (360, 937), (439, 936), (521, 937), (600, 937), (684, 936), (223, 445), (224, 513), (225, 580), (224, 649), (223, 714), (407, 715), (406, 646), (406, 580), (406, 510), (406, 446), (458, 457), (458, 602), (458, 631), (595, 388), (699, 390), (786, 390), (819, 428), (590, 696), (641, 755), (713, 579), (815, 580), (717, 648), (720, 715), (814, 714), (812, 650), (766, 741), (900, 753), (953, 485), (957, 387), (1049, 373), (1192, 364), (1212, 573), (1211, 730), (756, 891), (720, 906), (850, 891), (1303, 892), (844, 922), (925, 923), (1007, 922), (1085, 922), (1166, 924), (1247, 923), (1352, 923), (1414, 893), (1240, 893), (1167, 893), (1097, 894), (1023, 895), (1314, 771), (1412, 808), (1412, 713), (1375, 714), (1375, 649), (1435, 607), (1376, 577), (1375, 517), (1435, 514), (1436, 443), (1436, 380), (1436, 313), (1435, 243), (1375, 397), (1377, 440), (1391, 481), (1191, 543), (869, 578)]
# list = sorted(list, key=lambda p: (p[0], p[1]))
# draw_final(list)